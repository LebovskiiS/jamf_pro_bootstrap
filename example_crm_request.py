#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç CRM —Å–∏—Å—Ç–µ–º—ã –∫ Jamf Pro Bootstrap API
"""

import requests
import json
import base64
import hashlib
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC

def create_fernet(key: str) -> Fernet:
    """–°–æ–∑–¥–∞–Ω–∏–µ Fernet –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"""
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32,
        salt=b'jamf_bootstrap_salt',
        iterations=100000,
    )
    key_bytes = base64.urlsafe_b64encode(kdf.derive(key.encode()))
    return Fernet(key_bytes)

def encrypt_data(data: str, key: str) -> str:
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    fernet = create_fernet(key)
    encrypted_data = fernet.encrypt(data.encode())
    return base64.urlsafe_b64encode(encrypted_data).decode()

def encrypt_key_with_vault_key(key: str, vault_key: str) -> str:
    """–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –∫–ª—é—á–æ–º –∏–∑ Vault"""
    vault_fernet = Fernet(base64.urlsafe_b64encode(vault_key.encode()))
    encrypted_key = vault_fernet.encrypt(key.encode())
    return base64.urlsafe_b64encode(encrypted_key).decode()

def generate_checksum(data: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SHA256 —Ö–µ—à–∞"""
    return hashlib.sha256(data.encode()).hexdigest()

def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ Vault)
    VAULT_URL = "https://vault.your-domain.com"
    JAMF_API_ENDPOINT = "https://your-vm-ip:5000/api/request"
    
    # –°–µ–∫—Ä–µ—Ç—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø–æ–ª—É—á–∞—é—Ç—Å—è –∏–∑ Vault)
    API_TOKEN = "your-api-token-from-vault"
    ENCRYPTION_KEY = "your-32-character-encryption-key"
    VAULT_ENCRYPTION_KEY = "vault-encryption-key-for-key-encryption"
    
    # –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    employee_data = {
        "employee_id": "E12345",
        "email": "user@example.com",
        "full_name": "User Name",
        "device": {
            "serial": "C02XXXXX",
            "platform": "macOS",
            "os_version": "15.0"
        },
        "idempotency_key": "b2df428b-1234-5678-9abc-def012345678"
    }
    
    try:
        # 1. –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        employee_json = json.dumps(employee_data, sort_keys=True)
        print(f"üìã –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {employee_json}")
        
        # 2. –®–∏—Ñ—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        encrypted_payload = encrypt_data(employee_json, ENCRYPTION_KEY)
        print(f"üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {encrypted_payload[:50]}...")
        
        # 3. –®–∏—Ñ—Ä—É–µ–º –∫–ª—é—á –∫–ª—é—á–æ–º –∏–∑ Vault
        encrypted_key = encrypt_key_with_vault_key(ENCRYPTION_KEY, VAULT_ENCRYPTION_KEY)
        print(f"üîë –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á: {encrypted_key[:50]}...")
        
        # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º checksum
        checksum = generate_checksum(employee_json)
        print(f"üìä Checksum: {checksum}")
        
        # 5. –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        request_data = {
            'crm_id': f"crm-{employee_data['employee_id']}",
            'request_type': 'create',
            'payload': encrypted_payload,
            'encrypted_key': encrypted_key,
            'token': API_TOKEN
        }
        
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞: {JAMF_API_ENDPOINT}")
        print(f"üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞: {json.dumps(request_data, indent=2)}")
        
        # 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            JAMF_API_ENDPOINT,
            json=request_data,
            headers={'Content-Type': 'application/json'},
            timeout=30
        )
        
        print(f"üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(result, indent=2)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
            
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
